version: '3'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: notes-frontend
    command: serve -s build -l 3000
    restart: unless-stopped
    networks:
      - notes-network

  api:
    build:
      context: ./api
      dockerfile: Dockerfile.prod
      args:
        docker_id: ${DOCKER_UID}
        docker_user: ${DOCKER_USER}
    container_name: notes-api
    command: go build -v ./cmd/apiserver && ./apiserver
    user: ${DOCKER_USER}
    volumes:
      - ./api:/usr/src/app
      - ${GOPATH}/pkg:/go/pkg
    links:
      - db
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - notes-network
  debug:
    container_name: notes-api-debug
    build:
      context: ./api
      dockerfile: ../debug/Dockerfile
    ports:
      - "8080:8080"
      - "40000:40000"
    volumes:
      - ./api:/usr/src/app
    restart: unless-stopped
    command: bash -c "dlv --listen=:40000 --headless=true --api-version=2 --accept-multiclient exec /usr/src/app/tmp/main"
    networks:
      - notes-network
    depends_on:
      - api
  nginx:
    image: nginx:stable-alpine
    container_name: notes-nginx
    ports:
      - ${NGINX_PORT}:80
    volumes:
      - ./nginx/nginx.conf.prod:/etc/nginx/conf.d/nginx.conf
    depends_on:
      - frontend
      - api
      - db
    networks:
      - notes-network

  db:
    image: postgres:14.1-alpine
    container_name: notes-postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_db:/var/lib/postgresql/data
    ports:
      - ${DB_PORT}:5432
    networks:
      - notes-network

volumes:
  postgres_db:

networks:
  notes-network:
    driver: bridge
